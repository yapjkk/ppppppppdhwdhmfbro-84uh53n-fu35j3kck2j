import threading
import sys
import os
import time
from functions.loader import (
    load_smtp_config,
    load_yaml_config,
    load_emails,
    load_sender_emails
)
from colorama import Fore, Style

# Color definitions
COLOR_PRIMARY = Fore.YELLOW
STYLE_RESET = Style.RESET_ALL

pause_flag = threading.Event()
pause_flag.set()  # Initially not paused
pause_file = "pause.txt"  # File-based pause trigger
startup_messages_printed = False  # Flag to prevent duplicate startup messages
listener_running = False  # Flag to prevent multiple listeners
last_pause_state = False  # Track last pause state to prevent duplicate messages

# Try to import keyboard for Ctrl+P functionality
try:
    import keyboard
    KEYBOARD_AVAILABLE = True
except ImportError:
    KEYBOARD_AVAILABLE = False

def reset_listener_state():
    """Reset listener state for new email session"""
    global listener_running, last_pause_state
    listener_running = False
    last_pause_state = False

def listen_for_pause():
    """
    Pause/resume system for email sending process.
    Uses Ctrl+P for pause/resume when available, falls back to file-based system.
    Supports both global pause and folder-specific pause.
    Automatically reloads configs when resuming.
    """
    global startup_messages_printed, listener_running, last_pause_state
    
    # Prevent multiple listeners
    if listener_running:
        return
    listener_running = True
    
    if not startup_messages_printed:
        # Pause/resume system initialized
        startup_messages_printed = True
    
    # Set up Ctrl+P keyboard listener if available
    if KEYBOARD_AVAILABLE:
        def on_pause_key():
            """Handle Ctrl+P key press for pause/resume"""
            if pause_flag.is_set():
                # Currently running, pause it
                pause_flag.clear()
                if hasattr(loader, 'email_sending_active') and loader.email_sending_active:
                    print(f"\n{COLOR_PRIMARY}╭────────────────────────────────────────────────────────────────────────────────────╮{STYLE_RESET}")
                    print(f"{COLOR_PRIMARY}│                                                                                    │{STYLE_RESET}")
                    print(f"{COLOR_PRIMARY}│  ╭───────────────────────────────────────────────────────────────────────────╮     │{STYLE_RESET}")
                    print(f"{COLOR_PRIMARY}│  │     🛑 [PAUSED] Email sending paused (Ctrl+P pressed)                    │     │{STYLE_RESET}")
                    print(f"{COLOR_PRIMARY}│  ╰───────────────────────────────────────────────────────────────────────────╯     │{STYLE_RESET}")
                    print(f"{COLOR_PRIMARY}│                                                                                    │{STYLE_RESET}")
                    print(f"{COLOR_PRIMARY}╰────────────────────────────────────────────────────────────────────────────────────╯{STYLE_RESET}")
            else:
                # Currently paused, resume it
                pause_flag.set()
                if hasattr(loader, 'email_sending_active') and loader.email_sending_active:
                    print(f"\n{COLOR_PRIMARY}╭────────────────────────────────────────────────────────────────────────────────────╮{STYLE_RESET}")
                    print(f"{COLOR_PRIMARY}│                                                                                    │{STYLE_RESET}")
                    print(f"{COLOR_PRIMARY}│  ╭───────────────────────────────────────────────────────────────────────────╮     │{STYLE_RESET}")
                    print(f"{COLOR_PRIMARY}│  │     ▶️ [RESUMED] Email sending resumed (Ctrl+P pressed)                   │     │{STYLE_RESET}")
                    print(f"{COLOR_PRIMARY}│  ╰───────────────────────────────────────────────────────────────────────────╯     │{STYLE_RESET}")
                    print(f"{COLOR_PRIMARY}│                                                                                    │{STYLE_RESET}")
                    print(f"{COLOR_PRIMARY}╰────────────────────────────────────────────────────────────────────────────────────╯{STYLE_RESET}")
        
        # Register the Ctrl+P hotkey
        keyboard.add_hotkey('ctrl+p', on_pause_key)
    
    # File-based pause system (always works as backup)
    while True:
        try:
            # Check for global pause file
            global_paused = os.path.exists(pause_file)
            
            # Check for folder-specific pause file (only for current folder)
            folder_paused = False
            current_folder_name = None
            try:
                from functions import loader
                current_folder = getattr(loader, 'current_config_folder', 'configs/IONOS')
                current_folder_name = os.path.basename(current_folder)
                folder_pause_file = f"pause_{current_folder_name}.txt"
                
                # Only check for pause if we're actually in the email sending process
                # Don't show pause messages during project selection
                if hasattr(loader, 'email_sending_active') and loader.email_sending_active:
                    folder_paused = os.path.exists(folder_pause_file)
                else:
                    folder_paused = False
            except:
                pass
            
            # Determine if we should be paused
            # Global pause affects all folders, folder pause only affects the current folder
            should_be_paused = global_paused or folder_paused
            
            # Only process if state has changed
            if should_be_paused != last_pause_state:
                last_pause_state = should_be_paused
                
                if should_be_paused:
                    if pause_flag.is_set():
                        pause_reason = []
                        if global_paused:
                            pause_reason.append("global pause")
                        if folder_paused:
                            pause_reason.append(f"folder pause ({current_folder_name})")
                        
                        # Only show pause message if email sending is actually active
                        if hasattr(loader, 'email_sending_active') and loader.email_sending_active:
                            # Clear screen and show pause message
                            os.system('cls' if os.name == 'nt' else 'clear')
                            print(f"\n{COLOR_PRIMARY}╭────────────────────────────────────────────────────────────────────────────────────╮{STYLE_RESET}")
                            print(f"{COLOR_PRIMARY}│                                                                                    │{STYLE_RESET}")
                            print(f"{COLOR_PRIMARY}│  ╭───────────────────────────────────────────────────────────────────────────╮     │{STYLE_RESET}")
                            print(f"{COLOR_PRIMARY}│  │     🛑 [PAUSED] Email sending paused due to: {', '.join(pause_reason):<30} │     │{STYLE_RESET}")
                            print(f"{COLOR_PRIMARY}│  ╰───────────────────────────────────────────────────────────────────────────╯     │{STYLE_RESET}")
                            print(f"{COLOR_PRIMARY}│                                                                                    │{STYLE_RESET}")
                            print(f"{COLOR_PRIMARY}╰────────────────────────────────────────────────────────────────────────────────────╯{STYLE_RESET}")
                        pause_flag.clear()
                else:
                    if not pause_flag.is_set():
                        # Only show resume message if email sending is actually active
                        if hasattr(loader, 'email_sending_active') and loader.email_sending_active:
                            # Clear screen and show resume message
                            os.system('cls' if os.name == 'nt' else 'clear')
                            print(f"\n{COLOR_PRIMARY}╭────────────────────────────────────────────────────────────────────────────────────╮{STYLE_RESET}")
                            print(f"{COLOR_PRIMARY}│                                                                                    │{STYLE_RESET}")
                            print(f"{COLOR_PRIMARY}│  ╭───────────────────────────────────────────────────────────────────────────╮     │{STYLE_RESET}")
                            print(f"{COLOR_PRIMARY}│  │     ▶️ [RESUMED] Reloading configurations...{'':<40} │     │{STYLE_RESET}")
                            try:
                                # Get the current config folder from loader
                                from functions import loader
                                current_folder = getattr(loader, 'current_config_folder', 'configs/IONOS')
                                load_smtp_config(current_folder)
                                load_yaml_config(current_folder)
                                load_emails(current_folder)
                                load_sender_emails(current_folder)
                                print(f"{COLOR_PRIMARY}│  │     ✅ [UPDATED] Configs & Lists refreshed.{'':<42} │     │{STYLE_RESET}")
                            except Exception as e:
                                print(f"{COLOR_PRIMARY}│  │     ❌ Error during reload: {str(e):<47} │     │{STYLE_RESET}")
                            print(f"{COLOR_PRIMARY}│  ╰───────────────────────────────────────────────────────────────────────────╯     │{STYLE_RESET}")
                            print(f"{COLOR_PRIMARY}│                                                                                    │{STYLE_RESET}")
                            print(f"{COLOR_PRIMARY}╰────────────────────────────────────────────────────────────────────────────────────╯{STYLE_RESET}")
                        pause_flag.set()
            time.sleep(0.5)  # Check every 500ms
        except Exception as e:
            print(f"❌ File-based pause error: {e}")
            time.sleep(1)
