#!/usr/bin/env python3
"""
Punnnycode Encryption Module
Converts normal text to Cyrillic homographs for email deliverability
"""

import random
import re

# Precise mapping of Latin characters to visually identical Unicode homographs
# Only characters that look exactly like the original letters
UNICODE_MAP = {
    # Uppercase letters - only visually identical characters
    'A': ['–ê'],  # Cyrillic A (looks identical)
    'B': ['–í'],  # Cyrillic B (looks identical)
    'C': ['–°'],  # Cyrillic C (looks identical)
    'D': ['·é†'],  # Cherokee D (looks identical)
    'E': ['–ï'],  # Cyrillic E (looks identical)
    'F': ['“í'],  # Cyrillic F (looks identical)
    'G': ['·èÄ'],  # Cherokee G (looks identical)
    'H': ['·éª'],  # Cherokee H (looks identical)
    'I': ['–Ü'],  # Cyrillic I (looks identical)
    'J': ['·é´'],  # Cherokee J (looks identical)
    'K': ['Œö'],  # Greek K (looks identical)
    'L': ['·èû'],  # Cherokee L (looks identical)
    'M': ['Œú'],  # Greek M (looks identical)
    'N': ['Œù'],  # Greek N (looks identical)
    'O': ['Œü'],  # Greek O (looks identical)
    'P': ['Œ°'],  # Greek P (looks identical)
    'Q': ['‘ö'],  # Cyrillic Q (looks identical)
    'R': ['·é°'],  # Cherokee R (looks identical)
    'S': ['’è'],  # Armenian S (looks identical)
    'T': ['Œ§'],  # Greek T (looks identical)
    'U': ['’ç'],  # Armenian U (looks identical)
    'V': ['·èô'],  # Cherokee V (looks identical)
    'W': ['‘ú'],  # Cyrillic W (looks identical)
    'X': ['Œß'],  # Greek X (looks identical)
    'Y': ['Œ•'],  # Greek Y (looks identical)
    'Z': ['Œñ'],  # Greek Z (looks identical)
    
    # Lowercase letters - only visually identical characters
    'a': ['–∞'],  # Cyrillic a (looks identical)
    'b': ['·èè'],  # Cherokee b (looks identical)
    'c': ['—Å'],  # Cyrillic c (looks identical)
    'd': ['·èß'],  # Cherokee d (looks identical)
    'e': ['–µ'],  # Cyrillic e (looks identical)
    'f': ['f'],  # Keep original f
    'g': ['…°'],  # Script g (looks identical)
    'h': ['h'],  # Keep original h
    'i': ['—ñ'],  # Cyrillic i (looks identical)
    'j': ['—ò'],  # Cyrillic j (looks identical)
    'k': ['Œ∫'],  # Greek k (looks identical)
    'l': ['‚Öº'],  # Roman numeral l (looks identical)
    'm': ['‚Öø'],  # Roman numeral m (looks identical)
    'n': ['n'],  # Keep original n
    'o': ['Œø'],  # Greek o (looks identical)
    'p': ['—Ä'],  # Cyrillic p (looks identical)
    'q': ['‘õ'],  # Cyrillic q (looks identical)
    'r': ['r'],  # Keep original r
    's': ['—ï'],  # Cyrillic s (looks identical)
    't': ['t'],  # Keep original t
    'u': ['œÖ'],  # Greek u (looks identical)
    'v': ['v'],  # Keep original v
    'w': ['œâ'],  # Greek w (looks identical)
    'x': ['—Ö'],  # Cyrillic x (looks identical)
    'y': ['—É'],  # Cyrillic y (looks identical)
    'z': ['z'],  # Keep original z
}

# Additional special characters for more variety
SPECIAL_CHARS = {
    '!': 'ÔºÅ',  # Fullwidth exclamation mark
    '?': 'Ôºü',  # Fullwidth question mark
    '.': 'Ôºé',  # Fullwidth full stop
    ',': 'Ôºå',  # Fullwidth comma
    ':': 'Ôºö',  # Fullwidth colon
    ';': 'Ôºõ',  # Fullwidth semicolon
    '(': 'Ôºà',  # Fullwidth left parenthesis
    ')': 'Ôºâ',  # Fullwidth right parenthesis
    '[': 'Ôºª',  # Fullwidth left square bracket
    ']': 'ÔºΩ',  # Fullwidth right square bracket
    '{': 'ÔΩõ',  # Fullwidth left curly bracket
    '}': 'ÔΩù',  # Fullwidth right curly bracket
    '-': 'Ôºç',  # Fullwidth hyphen-minus
    '_': 'Ôºø',  # Fullwidth low line
    '=': 'Ôºù',  # Fullwidth equals sign
    '+': 'Ôºã',  # Fullwidth plus sign
    '*': 'Ôºä',  # Fullwidth asterisk
    '#': 'ÔºÉ',  # Fullwidth number sign
    '@': 'Ôº†',  # Fullwidth commercial at
    '$': 'ÔºÑ',  # Fullwidth dollar sign
    '%': 'ÔºÖ',  # Fullwidth percent sign
    '&': 'ÔºÜ',  # Fullwidth ampersand
    '|': 'ÔΩú',  # Fullwidth vertical line
    '\\': 'Ôºº',  # Fullwidth reverse solidus
    '/': 'Ôºè',  # Fullwidth solidus
    '<': 'Ôºú',  # Fullwidth less-than sign
    '>': 'Ôºû',  # Fullwidth greater-than sign
    '^': 'Ôºæ',  # Fullwidth circumflex accent
    '~': 'ÔΩû',  # Fullwidth tilde
    '`': 'ÔΩÄ',  # Fullwidth grave accent
}

def apply_punnnycode(text, intensity=0.7):
    """
    Convert normal text to Unicode homographs with specified intensity
    
    Args:
        text (str): Input text to convert
        intensity (float): Conversion intensity (0.0 = no conversion, 1.0 = full conversion)
    
    Returns:
        str: Text with Unicode homographs applied
    """
    if not text or intensity <= 0:
        return text
    
    result = []
    
    for char in text:
        # Skip if character should not be converted
        if random.random() > intensity:
            result.append(char)
            continue
            
        # Check for special characters first
        if char in SPECIAL_CHARS:
            result.append(SPECIAL_CHARS[char])
        # Check for Unicode mapping
        elif char in UNICODE_MAP:
            # Randomly select from available homographs
            homographs = UNICODE_MAP[char]
            selected_char = random.choice(homographs)
            result.append(selected_char)
        # Keep original character if no mapping exists
        else:
            result.append(char)
    
    return ''.join(result)

def apply_punnnycode_smart(text, intensity=0.6):
    """
    Smart punnnycode conversion that preserves readability
    
    Args:
        text (str): Input text to convert
        intensity (float): Conversion intensity (0.0 = no conversion, 1.0 = full conversion)
    
    Returns:
        str: Text with smart Cyrillic homographs applied
    """
    if not text or intensity <= 0:
        return text
    
    # Split text into words
    words = re.findall(r'\S+|\s+', text)
    result = []
    
    for word in words:
        # Skip whitespace
        if word.isspace():
            result.append(word)
            continue
            
        # Apply conversion to word
        converted_word = apply_punnnycode(word, intensity)
        result.append(converted_word)
    
    return ''.join(result)

def test_punnnycode():
    """Test the punnnycode conversion"""
    test_texts = [
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "abcdefghijklmnopqrstuvwxyz",
        "Important Message SRC",
        "Customer Service",
        "Account Verification Required",
        "Urgent Action Required",
        "Please Check Your Account",
        "Security Alert",
        "Payment Confirmation",
        "Account Suspended",
        "Verify Your Identity",
        "Update Required"
    ]
    
    print("üß™ Enhanced Punnnycode Conversion Test")
    print("=" * 60)
    
    for text in test_texts:
        converted = apply_punnnycode_smart(text, intensity=0.8)
        print(f"Original:  {text}")
        print(f"Converted: {converted}")
        print("-" * 40)
    
    print("\nüéØ Enhanced Features:")
    print("  ‚Ä¢ Comprehensive Unicode homograph mapping")
    print("  ‚Ä¢ Multiple character sets: Cyrillic, Greek, Armenian, Cherokee")
    print("  ‚Ä¢ Random character selection for maximum variation")
    print("  ‚Ä¢ Preserves readability while evading filters")
    print("  ‚Ä¢ Configurable intensity (0.0 - 1.0)")
    print("  ‚Ä¢ Smart word-based conversion")
    print("  ‚Ä¢ Special character support")
    print("  ‚Ä¢ Multiple variations per character")

if __name__ == "__main__":
    test_punnnycode()
